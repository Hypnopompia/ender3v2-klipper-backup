######################################################################
# Start Print and End Print
######################################################################

# Replace the slicer's custom start and end g-code scripts with
# START_PRINT and END_PRINT.

; Ender 3 Custom Start G-code

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
    # Start bed heating
    M140 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    # Home the printer
    G28
    # Move the nozzle near the bed
    G1 Z5 F3000
    # Move the nozzle very close to the bed
    G1 Z0.15 F300
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    # Reset Extruder
    G92 E0
    # Move Z Axis up little to prevent scratching of Heat Bed
    G1 Z2.0 F3000
    # Move to start position
    G1 X0.1 Y20 Z0.3 F5000.0
    # Draw the first line
    G1 X0.1 Y200.0 Z0.3 F1500.0 E15
    # Move to side a little
    G1 X0.4 Y200.0 Z0.3 F5000.0
    #  Draw the second line
    G1 X0.4 Y20 Z0.3 F1500.0 E30
    # Reset Extruder
    G92 E0
    # Move Z Axis up little to prevent scratching of Heat Bed
    G1 Z2.0 F3000
    # Move over to prevent blob squish
    G1 X5 Y20 Z0.3 F5000.0

[gcode_macro END_PRINT]
gcode:
    # Move nozzle away from print while retracting
    G91
    G1 E-2 F300
    # Raise nozzle by 2mm
    G1 Z2 F3000
    # Absolute positioning
    G90
    # Move X to min endstop, so the head is out of the way
    G28 X0
    # Move bed forward
    G1 Y200
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Disable steppers
    M84
    # Turn on the bed cooling fan and then turn it off after the bed gets below 35C
    # POWER_ON_BED_FAN

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

######################################################################
# BMP280/BME280/BME680 Environmental Sensor
######################################################################

# The macro below assumes you have a BME280 sensor_type defined in one
# of the applicable sections in printer.cfg, such as:
#
#[temperature_sensor my_sensor]
#sensor_type: BME280
#gcode_id: AMB
#
# Note the format of the parameter SENSOR in the macro below.  The BME280
# sensor status can be accessed using the format "bme280 <section_name>".
# The example section above is named "my_sensor", thus the bme280 can be
# queried as follows:
#
# QUERY_BME280 SENSOR='bme280 my_sensor'
#
# Since a default parameter is defined one could simply enter QUERY_BME280
# as well.

[gcode_macro QUERY_BME280]
gcode:
    {% set sensor = printer["bme280 my_sensor"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Pressure: %.2f hPa\n"
        "Humidity: %.2f%%" % (
            sensor.temperature,
            sensor.pressure,
            sensor.humidity))}

######################################################################
# HTU21D family Environmental Sensor
######################################################################

# The macro below assumes you have a HTU21D sensor_type defined in one
# of the applicable sections in printer.cfg, such as:
#
#[temperature_sensor my_sensor]
#sensor_type: HTU21D
#
# Note the format of the parameter SENSOR in the macro below.  The HTU21D
# sensor status can be accessed using the format "htu21d <section_name>".
# The example section above is named "my_sensor", thus the htu21d can be
# queried as follows:
#
# QUERY_HTU21D SENSOR='htu21d my_sensor'
#
# Since a default parameter is defined one could simply enter QUERY_HTU21D
# as well.

[gcode_macro QUERY_HTU21D]
gcode:
    {% set sensor = printer["htu21d my_sensor"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Humidity: %.2f%%" % (
            sensor.temperature,
            sensor.humidity))}

# SDCard 'looping' (aka Marlin M808 commands) support
#
# Support SDCard looping
[sdcard_loop]

# 'Marlin' style M808 compatibility macro for SDCard looping
[gcode_macro M808]
gcode:
    {% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}
    {% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}
    {% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}

# Cancel object (aka Marlin/RRF M486 commands) support
#
# Enable object exclusion
[exclude_object]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    G91
    G92 E0
    G1 E350 F{max_velocity}
    G1 E25 F{speed} #purge

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    G91
    G92 E0
    G1 E25 F{speed} # purge
    G1 E-100 F{max_velocity}

[gcode_macro POWER_ON_PRINTER]
gcode:
    {action_call_remote_method("set_device_power", device="printer", state="on")}

[gcode_macro POWER_OFF_PRINTER]
gcode:
    {action_call_remote_method("set_device_power", device="printer", state="off")}

[delayed_gcode DELAYED_PRINTER_OFF]
initial_duration = 0.
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    {% if printer["extruder"].temperature > 50 %}
      UPDATE_DELAYED_GCODE ID=DELAYED_PRINTER_OFF DURATION=60
    {% else %}
      POWER_OFF_PRINTER
    {% endif %}
  {% endif %}

# [gcode_macro POWER_ON_BED_FAN]
# gcode:
#     {action_call_remote_method("set_device_power", device="bed_fan", state="on")}
#     UPDATE_DELAYED_GCODE ID=DELAYED_BED_FAN_OFF DURATION=30

# [gcode_macro POWER_OFF_BED_FAN]
# gcode:
    # {action_call_remote_method("set_device_power", device="bed_fan", state="off")}

# [delayed_gcode DELAYED_BED_FAN_OFF]
# initial_duration = 0.
# gcode:
#   {% if printer["heater_bed"].temperature > 35 %}
#     UPDATE_DELAYED_GCODE ID=DELAYED_BED_FAN_OFF DURATION=30
#   {% else %}
#     POWER_OFF_BED_FAN
#   {% endif %}
